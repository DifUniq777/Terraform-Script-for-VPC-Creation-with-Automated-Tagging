Terraform Script for VPC Creation with Automated Tagging

provider "aws" {
  region = "us-east-1"
}

# Define variables
variable "vpc_cidr" {
  default = "10.0.0.0/16"
  description = "The CIDR block for the VPC."
}

variable "application_name" {
  default = "MyEnterpriseApp"
  description = "Name of the application for tagging."
}

variable "environment" {
  default = "production"
  description = "Environment tag value (e.g., development, staging, production)."
}

# Tags for all resources
locals {
  common_tags = {
    ApplicationName = var.application_name
    Environment     = var.environment
    ManagedBy       = "Terraform"
  }
}

# VPC
resource "aws_vpc" "main" {
  cidr_block = var.vpc_cidr
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = local.common_tags
}

# Subnets
resource "aws_subnet" "public" {
  count = 2
  vpc_id            = aws_vpc.main.id
  cidr_block        = cidrsubnet(aws_vpc.main.cidr_block, 4, count.index)
  map_public_ip_on_launch = true
  availability_zone = element(data.aws_availability_zones.available.names, count.index)
  tags = merge(local.common_tags, { "SubnetType" = "Public" })
}

resource "aws_subnet" "private" {
  count = 2
  vpc_id            = aws_vpc.main.id
  cidr_block        = cidrsubnet(aws_vpc.main.cidr_block, 4, count.index + 2)
  availability_zone = element(data.aws_availability_zones.available.names, count.index)
  tags = merge(local.common_tags, { "SubnetType" = "Private" })
}

# NAT Gateway for private subnets
resource "aws_eip" "nat" {
  count = 2
  vpc = true
  tags = merge(local.common_tags, { "Name" = "NAT-${count.index}" })
}

resource "aws_nat_gateway" "nat" {
  count                  = 2
  allocation_id          = aws_eip.nat[count.index].id
  subnet_id              = element(aws_subnet.public.*.id, count.index)
  connectivity_type      = "public"
  tags = merge(local.common_tags, { "Name" = "NAT-Gateway-${count.index}" })
}

# Route Tables
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id
  tags   = merge(local.common_tags, { "Name" = "Public-Route-Table" })
}

resource "aws_route_table" "private" {
  count  = 2
  vpc_id = aws_vpc.main.id
  tags   = merge(local.common_tags, { "Name" = "Private-Route-Table-${count.index}" })
}

# Output values for verification
output "vpc_id" {
  value = aws_vpc.main.id
}

output "public_subnets" {
  value = aws_subnet.public[*].id
}

output "private_subnets" {
  value = aws_subnet.private[*].id
}
